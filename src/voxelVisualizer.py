"""
    Uses the .hdf5 file generated by pyVox.py to visualize the active-site
    ligand interactions.
    User has two inputs:
        1) complete path to file of pose
        2) what index from that set would you like to see
"""

import numpy as np
import h5py
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import os
import sys


#Function used to initialize the 3D grid
def make_ax(grid=False):
    fig = plt.figure()
    ax = fig.gca(projection='3d')
    #ax.set_axis_off()
    ax.set_xlabel("x")
    ax.set_ylabel("y")
    ax.set_zlabel("z")
    ax.grid(grid)
    return ax

def main():
    voxFile = str(sys.argv[1]) #What hdf5 file is being read in
    index = int(sys.argv[2])   #Which index in the set to graph data

    #Opens and reads in the choosen hdf5 file
    h5f = h5py.File(voxFile,'r')
    proMatrix = h5f['ligands'][index,:,:,:,:]  #Matrix associated with the index
    proLabel = h5f['labels'][index]            #Energy associated with the index
    proFile = h5f['file'][index]               #Sdf file associated with the index
    h5f.close()


    #Outputs summary of data being graphed to user
    print("\n" * 5)
    print('---------------------------------------------------------')
    print('                     Voxel Viewer')
    print('---------------------------------------------------------')
    print("sdf file           : "+str(proFile))
    print("Data index         : "+str(index))
    print("Interaction energy : "+str(proLabel))
    print('---------------------------------------------------------')
    print('            Graph may take a minute to load')
    print("\n" * 3)


    #Sets variables to RGB values with alpha values
    C1 = [255/255, 102/255, 102/255, .1]
    C2 = [255/255, 255/255, 102/255, .1]
    C3 = [102/255, 255/255, 102/255, .1]
    C4 = [102/255, 255/255, 255/255, .1]
    C5 = [102/255, 102/255, 255/255, .1]
    C6 = [255/255, 102/255, 255/255, .1]
    line = [255/255,182/255,193/255,.03]


    #Plots each channel value with a unique color
    ax = make_ax(True)
    ax.voxels(proMatrix[:,:,:,0], facecolors=C1, edgecolors=C1)
    ax.voxels(proMatrix[:,:,:,1], facecolors=C2, edgecolors=C2)
    ax.voxels(proMatrix[:,:,:,2], facecolors=C3, edgecolors=C3)
    ax.voxels(proMatrix[:,:,:,3], facecolors=C4, edgecolors=C4)
    ax.voxels(proMatrix[:,:,:,4], facecolors=C5, edgecolors=C5)
    ax.voxels(proMatrix[:,:,:,5], facecolors=C6, edgecolors=C6)
    plt.show()

#Run the main fuction
if __name__ == "__main__":
    main()
