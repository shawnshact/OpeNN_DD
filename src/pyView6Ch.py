"""
    Uses the .hdf5 file generated by pyVox.py to visualize the active-site
    ligand interactions.
    User has 3 inputs:
        1) what set to look at (train, val, test)
        2) what index from that set would you like to see
        3) path to file containing specified voxelized data
        3) what mode (e: shows electrons only, n:shows nuclei only, b: shows both)
"""

import numpy as np
import h5py
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import os
import sys



def make_ax(grid=False):
    fig = plt.figure()
    ax = fig.gca(projection='3d')
    ax.set_axis_off()
    ax.set_xlabel("x")
    ax.set_ylabel("y")
    ax.set_zlabel("z")
    ax.grid(grid)
    return ax

def main():
    voxelizedDataPath = str(sys.argv[3]) #path of file contiaing voxelized data
    set = str(sys.argv[1]) #Which set to pull from, (train, val, test)
    index = int(sys.argv[2]) #Which index in the set to graph data
    #mode = str(sys.argv[3]) #e = electrons, n = nuclei, b = both


    validSets = ['Train', 'train', 'Test', 'test', 'validation', 'Validation', 'val', 'Val']
    trainSet = ['Train', 'train']
    testSet = ['Test', 'test']
    valSet = ['Val', 'val']

    if set not in validSets:
        raise RuntimeError('valid sets are train, test, val') from error

    """
    if mode not in validModes:
        raise RuntimeError('valid modes are e, n, b') from error
    """
    """
    if mode in eSet:
        eShow = True
        nShow = False
        modePrintLabel = "Showing only electrons"
    elif mode in nSet:
        nShow = True
        eShow = False
        modePrintLabel = "Showing only nuclei"
    elif mode in bSet:
        eShow = True
        nShow = True
        modePrintLabel = "Showing both electrons and nuclei"

    os.chdir(voxelizedDataPath)
    h5f = h5py.File('activeCacheElementECount.h5','r')
    siteMatrix = h5f['activeCacheMatrix'][:]
    h5f.close()
    """


    h5f = h5py.File(voxelizedDataPath,'r')
    if set in trainSet:
        ligandProMatrix = h5f['train_ligands'][index,:,:,:,:]
        ligandProLabel = h5f['train_labels'][index]
        setName = 'training data'
    elif set in valSet:
        ligandProMatrix = h5f['val_ligands'][index,:,:,:,:]
        ligandProLabel = h5f['val_labels'][index]
        setName = 'validation data'
    elif set in testSet:
        ligandProMatrix = h5f['test_ligands'][index,:,:,:,:]
        ligandProLabel = h5f['test_labels'][index]
        setName = 'testing data'
    h5f.close()



    """
    ligandMatrixElectrons = np.subtract(ligandProMatrix[:,:,:,0], siteMatrix[:,:,:,0])
    ligandMatrixNuclei = np.subtract(ligandProMatrix[:,:,:,1], siteMatrix[:,:,:,1])
    np.set_printoptions(threshold=np.nan)
    ligandMatrixElectrons = ligandMatrixElectrons.clip(min=0)
    ligandMatrixNuclei = ligandMatrixNuclei.clip(min=0)
    """

    print("\n" * 5)
    print('---------------------------------------------------------')
    print('                     Voxel Viewer')
    print('---------------------------------------------------------')
    print("Using              : "+setName)
    print("Data index         : "+str(index))
    print("Interaction energy : "+str(ligandProLabel))
    print('---------------------------------------------------------')
    print('            Graph may take a minute to load')
    print("\n" * 3)


    C1 = [255/255, 102/255, 102/255, .1]
    C2 = [255/255, 255/255, 102/255, .1]
    C3 = [102/255, 255/255, 102/255, .1]
    C4 = [102/255, 255/255, 255/255, .1]
    C5 = [102/255, 102/255, 255/255, .1]
    C6 = [255/255, 102/255, 255/255, .1]
    line = [255/255,182/255,193/255,.03]

    ax = make_ax(True)
    ax.voxels(ligandProMatrix[:,:,:,0], facecolors=C1, edgecolors=C1)
    ax.voxels(ligandProMatrix[:,:,:,1], facecolors=C2, edgecolors=C2)
    ax.voxels(ligandProMatrix[:,:,:,2], facecolors=C3, edgecolors=C3)
    ax.voxels(ligandProMatrix[:,:,:,3], facecolors=C4, edgecolors=C4)
    ax.voxels(ligandProMatrix[:,:,:,4], facecolors=C5, edgecolors=C5)
    ax.voxels(ligandProMatrix[:,:,:,5], facecolors=C6, edgecolors=C6)
    plt.show()

#Run the main fuction
if __name__ == "__main__":
    main()
